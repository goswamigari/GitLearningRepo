
GIT is basically a version control tool while github is a web based hosting website.

GIT commands

1. git init
to initialise a git repository for a new or existing project

2. git add <file_name>
to add one or more files to staging(index)

3. git status
list files you've changed and those you still need to add or commit:

4. git commit -m "commit message"
commit chanes to head

(git commit -am "message"
to add to staging area and commit with message together

5. git rm --cached <file_name>
to remove files from staging area

6. git branch <branch_name>
to create new branch with branch_name

7. git checkout <branch_name>
to switch from current branch to another <branch_name>

8. git merge <branch_name>
to merge branch into current branch_name, 
for this you need to be in the current branch


--------------GITHUB commands--------
echo "#GitLearningRepo" >> README.md


9. git remote add origin https://github.com/goswamigari/GitLearningRepo.git
to push an existing repository from the command line

10. git remote -v
to check how many remote repositories are present
it shows which repositories to fetch and which ones to push to 

11. git push -u origin master
master is the name of the git branch that was pulled to github

another one is the main branch (in the github profile)

12.  git push origin dev

workflow:
(git add---> git commit -->git push
     git merge              git fetch
<-----------------------<--------------
               git pull
<---------------------------------------
for merging changes in the remote github repo-->
first create pull request and then merge to the branch on github
but on the local repo on my machine you can execute 
"git merge <branch_name>" command

13. git pull
for pulling the changes that are in the remote repo to my local repo

14. create .gitignore folder--> here it saves the files that are ignored from git commands from staging and it is not pushed to the github repo/merged, etc.

15. git add .
to add all the files with all the changes made to the staging area, you wont have to add them individually

16. for master branch you can use--> 'git push' and 'git pull' directly but for dev branches you will have to specify 'git push origin <branch_name>
and if you want to directly use 'git push' and 'git pull' here, you will need to specify 'git push --set-upstream origin dev'

17.'Forking'--> you can use, forking with other public repo--> to copy a remote repo in your own github repo and then you can clone/download that repo through 
git clone <github_repo_https_name>

18. 'rebase' command with git--> For rewinding head to replay your work on top of it.(master branch changes are placed below: unicorn branch changes"
lets say, there are two branches: master and unicorns.
All changes in unicorns branch will be placed above and all the changes from the master branch will be placed below the unicorns branch and head will be on top of unicorns branch
For this, do following:
>>gitcheckout unicorns
>>git rebase master

19. using rebase--> if we want to alter the order of the commits in the same branch.
>> git rebase -i HEAD~3
here a rebase editor will be popped up
and the last 3 logs will be shown in the rebase editor, in this editor we can shuffle/alter the commands

20. git log --oneline 
shows changes of all the 

21. 
